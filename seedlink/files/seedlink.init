#!/bin/sh /etc/rc.common

START=98
STOP=10

# see http://neic.usgs.gov/neis/station_book/background.html for the syntay of
# station names:
# Codes must begin with an upper case letter in the Roman alphabet, 
# but the remaining characters may be any combination of upper-case alphanumeric symbols.

get_name_from_mac() {
        # e.g. "23:E1:5E  " (note the 2 spaces at the end)
        HEXNUM=$(ifconfig eth0 | grep -o -e "[[:xdigit:]]*:[[:xdigit:]]*:[[:xdigit:]]*  $" | tr -d " ")
        # 23:E1 (just a helper)
        FIRST_TWO_HEX=${HEXNUM%???}
        # 0x"5E  "
        HEX3=${HEXNUM#??????}
        # 0x23
        HEX1=${HEXNUM%??????}
        # 0xE1
        HEX2=${FIRST_TWO_HEX#???}
	# FIXME: one should certainly use something better like base32 (but 1st as letter)
	# maybe with http://docs.python.org/lib/module-base64.html
	echo S"$HEX2""$HEX3"
}

get_mac() {
        echo $(ifconfig eth0 | grep -o -e "[[:xdigit:]]*:[[:xdigit:]]*:[[:xdigit:]]*:[[:xdigit:]]*:[[:xdigit:]]*:[[:xdigit:]]*  $" | tr -d " ")
}

write_seedlink_ini() {
	mkdir -p /var/seedlink/data

	SEEDLINK_INI_FILE=/var/seedlink/seedlink.ini
	NETWORK_NAME=$(uci get seismo.network.net_code)
	STATION_NAME=$(get_name_from_mac)
	ETH0_MAC=$(get_mac)
	STATION_DESC="Station name $STATION_NAME automatically generated from eth0 MAC $ETH0_MAC"

	# Number of recent Mini-SEED packets to keep in memory
	# that is, in-ram = buffers * 512B
	# that is, 512 = 1000 * 512B
	BUFFERS=1000

	# Number of temporary files to keep on disk
	SEGMENTS=4
	# Size of one segment in 512-byte blocks
	# that is, needed-file-space=segments*segsize*512B
	# 8 MB segsize
	# that is, 800 MB = 100*16384*512B
	SEGSIZE=16384
	
	FILEBASE=/var/seedlink/data

	# Channel permutation depending on how the device is mounted
	MOUNTED=$(uci get seismo.installation.mounted)
	if [ "$MOUNTED" == "biggest_side" ]; then 
    		PERM="1023"

	elif [ "$MOUNTED" == "medium_side" ]; then 
    		PERM="1203"
	else
    		PERM="0123"
	fi	

	# Config line for running the data-provider from a file with seedlink and ew_plugin:
	### PLUGIN_CMD="EW_SERVER_IP=192.168.4.151 data-provider -n $STATION_NAME -f /etc/data-provider/ChiChi_215_usec.txt -l seedlink.so -l ew_plugin.so"
        # Config line for the EGU (running with seedlink, ew_plugin and --no-wait option 
	# because GPS will most likely not be available there), dont forget to adopt 
	# the server ip where the EW program is runnning, set the date via "date" and do
	# /etc/init.d/seedlink stop and start to restart it with correct time:
	### PLUGIN_CMD="EW_SERVER_IP=192.168.4.151 data-provider -n $STATION_NAME -l seedlink.so -l ew_plugin.so --no-wait"

	### SETTINGS are a uci option
        # with this default value
        ###   
        
        DATA_PROVIDER_OPTIONS=$(uci get seismo.installation.dataprovideroptions)
        if [ -z "$DATA_PROVIDER_OPTIONS" ]; then
                # DEFAULT   
                DATA_PROVIDER_OPTIONS="-l seedlink.so -l netcoords.so -l clocksync.so -l click_plugin.so -l rsdp_plugin.so -d 2 --no-wait --syslog"
        fi

        PLUGIN_CMD="data-provider -n $STATION_NAME -P $PERM $DATA_PROVIDER_OPTIONS"

	cat > "$SEEDLINK_INI_FILE" << EOF
********** DO NOT EDIT BY HAND:                               ***************
********** THIS FILE IS AUTOGENERATED BY /etc/init.d/seedlink ***************
********** change /etc/init.d/seedlink for editing seedlink.ini  ************

[seedlink]

* Organization and default network code
organization = "data_center_name"
network = NE

* Lockfile path
lockfile = /var/run/seedlink.pid

* Directory where Seedlink will store its disk buffers
filebase = $FILEBASE

* Paths to config files of StreamProcessor
filters = /etc/seedlink/filters.fir
streams = /etc/seedlink/streams.xml

* Use Steim2 encoding by default
encoding = steim2

* List of trusted addresses
* trusted = "127.0.0.0/8"
trusted = "127.0.0.0/8"

* Check start and end times of streams
stream_check = enabled

* If stream_check = enabled, also check for gaps in all channels that
* match given pattern. Register all gaps that are larger than +-0.5 seconds.
* gap_check_pattern = [EBLV][HLNG][ZNE]|S[NG][ZNE]
* Disabled to save memory.
gap_check_pattern = XXXXX
gap_treshold = 500000

* Disable window extraction from arbitrary Internet hosts
window_extraction = disabled

* Enable window extraction from trusted hosts
window_extraction_trusted = enabled

* INFO provided to arbitrary Internet hosts: ID, CAPABILITIES, STATIONS
* info = stations
info = all

* INFO provided to trusted hosts: ID, CAPABILITIES, STATIONS, STREAMS,
* GAPS, CONNECTIONS, ALL
info_trusted = all

* Show requests in log file
request_log = enabled

* Give warning if an input channel has time gap larger than 0.02 seconds (gaps of 0.01 seconds happen quite often here)
proc_gap_warn = 20000

* Flush streams if an input channel has time gap larger than 0.1 s
proc_gap_flush = 100000

* Maximum allowed deviation from the sequence number of oldest packet if
* packet with requested sequence number is not found. If seq_gap_limit is
* exceeded, data flow starts from the next packet coming in, otherwise
* from the oldest packet in buffer.
* Use the following to always start with the oldest packet:
* seq_gap_limit = 16777216
seq_gap_limit = 100000

* Server's TCP port
port = 18000

* Number of recent Mini-SEED packets to keep in memory
buffers = $BUFFERS

* Number of temporary files to keep on disk
segments = $SEGMENTS

* Size of one segment in 512-byte blocks
* that is, needed-file-space=segments*segsize*512B
* that is, 24 MB = 25000 KB = 10*5000*512B
segsize = $SEGSIZE

* Total number of TCP/IP connections allowed
connections = 400

* Maximum speed per connection (0: throttle disabled)
bytespersec = 2000

* Defaults for all plugins. All of these parameters take value in seconds;
* zero disables the corresponding feature.
*
* timeout -- shut down the plugin if no data arrives in this time period
*   [0 = wait for data forever];
* start_retry -- restart terminated plugins after this time period (plugins
*   can terminate themselves because of some internal error, or they can be
*   shut down by the Seedlink if timeout occurs or invalid data received)
*   [0 = don' restart terminated plugins];
* shutdown_wait -- wait this time period for a plugin to terminate after
*   sending the TERM signal. If a plugin will not terminate, it will be
*   terminated the hard way by sending the KILL signal [0 = wait forever].
plugin_timeout = 0
plugin_start_retry = 60
plugin_shutdown_wait = 10

* The first station is always available in uni-station mode (regardless
* of the "access" parameter). Add a dummy station, so uni-station mode
* cannot be used.

station .dummy access = 0.0.0.0 description = "data_center_name"

* List of plugins which supply data to the Seedlink server. Several
* instances of a plugin under different names can be used, eg.
*   plugin edata1   cmd="/home/sysop/seiscomp/acquisition/bin/serial_plugin -v" timeout=600
*   plugin edata2   cmd="/home/sysop/seiscomp/acquisition/bin/serial_plugin -v" timeout=600
* In this case, also corresponding "edata1" and "edata2" sections in the
* plugins.ini file will have to be defined. The plugin parameters above can
* be set individually for each plugin here (without the "plugin_" suffix).

plugin sensorboard cmd="$PLUGIN_CMD"
             timeout = 0
             start_retry = 30
             shutdown_wait = 10

station $STATION_NAME  description = "$STATION_DESC"
             name = $STATION_NAME
             network = $NETWORK_NAME
             proc = sensorboard

********** DO NOT EDIT BY HAND:                               ***************
********** THIS FILE IS AUTOGENERATED BY /etc/init.d/seedlink ***************
********** change /etc/init.d/seedlink for editing seedlink.ini  ************

EOF

	logger -t seedlink-init $SEEDLINK_INI_FILE written, NETWORK=$NETWORK_NAME, NAME=$STATION_NAME, BUFFERS=$BUFFERS, SEGMENTS=$SEGMENTS, SEGSIZE=$SEGSIZE, FILEBASE=$FILEBASE, PERM=$PERM

}

start() {
	# Test if we have a data partition mounted, else don't start segment_backupper
	MOUNTRESULT=$(cat /proc/mounts | grep "/data")
	LOGTORAM=$(uci get seismo.logging.log_to_ram)

	# Write seedlink ini first
	write_seedlink_ini
	
	# Call segment_backupper init if not ram only
	if [ "$MOUNTRESULT" != "" ] && [ $LOGTORAM == 0 ]
	then
		mkdir -p /data/seedlink
		/usr/bin/segment_backupper.py init
	fi	
	
	# Start seedlink
	/usr/bin/seedlink --daemon --config-file=$SEEDLINK_INI_FILE

	# Run segment_backupper if not ram only
	if [ "$MOUNTRESULT" != "" ] && [ $LOGTORAM == 0 ]
	then
		/usr/bin/segment_backupper.py &
	fi	
	
}

stop() {
	killall segment_backupper.py
	killall data-provider
	killall seedlink
}

