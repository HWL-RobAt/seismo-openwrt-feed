/***************************************************************************//**
 * @file RTDS_MACRO.h
 * @author Toralf Niebuhr, Ronald Kluth, Dorian Weber
 * @brief RTDS Boost integration
 * 
 * This file defines all macros that are generated by the RTDS code generator.
 ******************************************************************************/

#ifndef RTDS_MACRO_H_INCLUDED
#define RTDS_MACRO_H_INCLUDED

#include "RTDS_ERROR.h"
#include "RTDS_LOGGER.hpp"
#include "RTDS_SDLPROCESS.hpp"
#include "RTDS_SDLBLOCK.hpp"


/* ************************************************************* SDL KEYWORDS */

#define PARENT        parent
#define SELF          msgQueue.writer
#define OFFSPRING     offspring
#define SENDER        (&currentMessage->sender)


/* ********************************************************* TASK ENTRY POINT */

#define RTDS_TASK_ENTRY_POINT(PROCESS_CLASS)

/**@brief Forward declares an SDL process class.
 */
#define RTDS_TASK_ENTRY_POINT_PROTO(PROCESS_CLASS)  class PROCESS_CLASS


/* ******************************************************************* MEMORY */

/**@brief Allocates a chunk of memory.
 */
#define RTDS_MALLOC(SIZE)             std::malloc(SIZE)

/**@brief Frees chunks of memory.
 */
#define RTDS_FREE(PTR)                std::free(PTR)

/**@brief Copies memory from one location to another.
 */
#define RTDS_MEMCPY(DEST, SRC, SIZE)  std::memcpy(DEST, SRC, SIZE)


/* ******************************************************************** TIMER */

/**@brief Removes the timer from the execution schedule.
 */
#define RTDS_RESET_TIMER(TIMER) \
	do { \
		SX_DEBUG(">      Resetting <%s>\n",                  \
		         #TIMER + sizeof("RTDS_message"));           \
		RTDS_LOG_RESET_TIMER(msgQueue.writer, TIMER, #TIMER, \
		                     getCurrentTime());              \
		RTDS::SDLTimer& timer = getTimerByID(TIMER);         \
		timer.removeFromSchedule();                          \
	} while (0)

/**@brief Sets the timer to trigger in a specified amount of time.
 */
#define RTDS_SET_TIMER(TIMER, DELAY) \
	do { \
		SX_DEBUG(">      Setting <%s> to schedule in " #DELAY "\n", \
		         #TIMER + sizeof("RTDS_message"));                  \
		RTDS_LOG_SET_TIMER(msgQueue.writer, TIMER, #TIMER,          \
		                   getCurrentTime(), DELAY);                \
		getTimerByID(TIMER).scheduleIn(DELAY);                      \
	} while (0)


/* ****************************************************************** MESSAGE */

/**@brief Sends a message to another SDL process using its message queue
 *        reference.
 */
#define RTDS_MSG_QUEUE_SEND_TO_ID(MESSAGE_NUMBER, LENGTH_DATA, P_DATA, \
                                  RECEIVER) \
	do { \
		RTDS::MsgHeader* msg =                                   \
			new RTDS::MsgHeader(MESSAGE_NUMBER,              \
			                    *msgQueue.writer,            \
			                    LENGTH_DATA, P_DATA);        \
		SX_DEBUG(">      Sending <%s> to <%p>\n",                \
		         #MESSAGE_NUMBER + sizeof("RTDS_message"),       \
		         RECEIVER);                                      \
		RTDS_LOG_MESSAGE_SEND(msgQueue.writer, RECEIVER,         \
		                      getCurrentTime(), #MESSAGE_NUMBER, \
		                      msg, sequenceNumber);              \
		msgQSend(*RECEIVER, msg);                                \
	} while (0)

/**@brief Sends a message to the environment process.
 */
#define RTDS_MSG_QUEUE_SEND_TO_ENV(MESSAGE_NUMBER, LENGTH_DATA, P_DATA) \
	RTDS_MSG_QUEUE_SEND_TO_NAME(MESSAGE_NUMBER, LENGTH_DATA, P_DATA, \
	                            "RTDS_Env", RTDS_process_RTDS_Env)

/**@brief Sends a message to another SDL process using its name and local block
 *        information.
 */
#define RTDS_MSG_QUEUE_SEND_TO_NAME(MESSAGE_NUMBER, LENGTH_DATA, P_DATA, \
                                    RECEIVER_STRING, RECEIVER_NUMBER)    \
	do { \
		RTDS_RtosQueueId rcv =                                       \
			cover->getMsgQWriterByID(RECEIVER_NUMBER);           \
		if (rcv) {                                                   \
			RTDS::MsgHeader* msg =                               \
				new RTDS::MsgHeader(MESSAGE_NUMBER,          \
				                    *msgQueue.writer,        \
				                    LENGTH_DATA, P_DATA);    \
			SX_DEBUG(">      Sending <%s> to <%s>\n",            \
			         #MESSAGE_NUMBER + sizeof("RTDS_message"),   \
			         #RECEIVER_NUMBER); \
			RTDS_LOG_MESSAGE_SEND(msgQueue.writer, rcv,          \
			                      getCurrentTime(),              \
			                      #MESSAGE_NUMBER, msg,          \
			                      sequenceNumber);               \
			msgQSend(*rcv, msg);                                 \
		} else {                                                     \
			SX_ERROR("receiver could not be found");             \
		}                                                            \
	} while (0)

/**@brief Saves a message.
 */
#define RTDS_MSG_SAVE(MESSAGE) \
	saveQueue.writer->put(new RTDS::MsgHeader(*MESSAGE))


/* **************************************************************** SEMAPHORE */

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_BINARY_SEMAPHORE_CREATE(SEMAPHORE_NAME, SEMAPHORE_NUMBER, OPTIONS,\
                                     INITIAL_STATE)

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_MUTEX_SEMAPHORE_CREATE(SEMAPHORE_NAME, SEMAPHORE_NUMBER, OPTIONS)

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_COUNTING_SEMAPHORE_CREATE(SEMAPHORE_NAME, SEMAPHORE_NUMBER,\
                                       OPTIONS, INITIAL_COUNT)

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_SEMAPHORE_NAME_DELETE(SEMAPHORE_NAME, SEMAPHORE_NUMBER)

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_SEMAPHORE_NAME_TAKE(SEMAPHORE_NAME, SEMAPHORE_NUMBER, TIME_OUT)

/**@brief Since ODEMx is a pseudo-parallel simulation framework, this macro may
 * remain empty.
 */
#define RTDS_SEMAPHORE_NAME_GIVE(SEMAPHORE_NAME, SEMAPHORE_NUMBER)


/* ****************************************************************** PROCESS */

/**@brief Creates a new instance of an SDL process class.
 */
#define RTDS_PROCESS_CREATE(PROCESS_NAME, PROCESS_NUMBER, PROCESS_CLASS, \
                            PRIORITY) \
	do { \
		PROCESS_CLASS* tmp =                                       \
			new PROCESS_CLASS(logger);                         \
		offspring = SDLProcess::setParent(tmp, msgQueue.writer);   \
		cover->embed(*tmp, PROCESS_NUMBER);                        \
		RTDS_LOG_PROCESS_CREATION(&tmp->getPort(), #PROCESS_CLASS, \
		                          msgQueue.writer);                \
		SX_DEBUG(">      Spawned <" #PROCESS_CLASS ">\n");         \
		tmp->activate();                                           \
	} while(0)

/**@brief Terminates an SDL process.
 */
#define RTDS_PROCESS_KILL return 0;


/* ***************************************************** FINITE STATE MACHINE */

/**@brief Cleans up procedures after a successful call.
 */
#define RTDS_PROCEDURE_CLEAN_UP

/**@brief Sets a new SDL state for the current process.
 */
#define RTDS_SDL_STATE_SET(NEW_STATE) \
	do { \
		if (sdlState != NEW_STATE)                          \
		{                                                   \
			SX_DEBUG(">      Setting state to <%s>\n",  \
			         #NEW_STATE + sizeof("RTDS"));      \
			RTDS_LOG_STATE_CHANGE(msgQueue.writer,      \
			                      #NEW_STATE,           \
			                      getCurrentTime());    \
			msgQueue.splice(saveQueue);                 \
		}                                                   \
		RTDS_sdlStatePrev = sdlState;                       \
		sdlState = NEW_STATE;                               \
	} while (0)


/* ******************************************************** ERROR PROPAGATION */

/**@brief Should never happen.
 */
#define RTDS_MSG_INPUT_ERROR SX_ERROR("input error")

#endif
